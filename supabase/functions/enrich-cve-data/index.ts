
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.21.0";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  const supabaseUrl = Deno.env.get('SUPABASE_URL') || '';
  const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') || '';
  
  const supabase = createClient(supabaseUrl, supabaseServiceKey);

  try {
    // Fetch unenriched vulnerabilities (those without technical_impact)
    const { data: unenrichedData, error: fetchError } = await supabase
      .from('vulnerabilities')
      .select('*')
      .is('technical_impact', null)
      .limit(10); // Process in batches
    
    if (fetchError) throw fetchError;
    
    if (!unenrichedData || unenrichedData.length === 0) {
      return new Response(
        JSON.stringify({ 
          success: true, 
          message: "No unenriched vulnerabilities found",
          count: 0,
          processed: []
        }),
        { 
          headers: { 
            ...corsHeaders, 
            "Content-Type": "application/json" 
          } 
        }
      );
    }
    
    // Process each vulnerability
    const processResults = [];
    
    for (const vuln of unenrichedData) {
      try {
        // In a real implementation, this would call OpenAI API
        // For now, we'll simulate the enrichment with placeholder data
        const enrichedData = simulateAIEnrichment(vuln);
        
        // Update the vulnerability with enriched data
        const { error: updateError } = await supabase
          .from('vulnerabilities')
          .update(enrichedData)
          .eq('id', vuln.id);
        
        if (updateError) throw updateError;
        
        processResults.push({
          id: vuln.id,
          title: vuln.title,
          status: "success"
        });
        
      } catch (error) {
        processResults.push({
          id: vuln.id,
          title: vuln.title,
          status: "failed",
          error: error.message
        });
      }
    }
    
    return new Response(
      JSON.stringify({ 
        success: true, 
        message: `Processed ${processResults.length} vulnerabilities`,
        count: processResults.length,
        processed: processResults
      }),
      { 
        headers: { 
          ...corsHeaders, 
          "Content-Type": "application/json" 
        } 
      }
    );
    
  } catch (error) {
    console.error("Error enriching CVE data:", error);
    
    return new Response(
      JSON.stringify({ 
        success: false, 
        message: error.message 
      }),
      { 
        status: 500,
        headers: { 
          ...corsHeaders, 
          "Content-Type": "application/json" 
        } 
      }
    );
  }
});

// Function to simulate AI enrichment
function simulateAIEnrichment(vulnerability) {
  // Severity levels: critical, high, medium, low, informational
  const severities = ["critical", "high", "medium", "low", "informational"];
  const randomSeverity = severities[Math.floor(Math.random() * severities.length)];
  
  // Risk ratings: critical, high, medium, low
  const riskRatings = ["critical", "high", "medium", "low"];
  const randomRisk = riskRatings[Math.floor(Math.random() * riskRatings.length)];
  
  return {
    ...vulnerability,
    severity: randomSeverity,
    risk_rating: randomRisk,
    technical_impact: `This vulnerability could potentially allow attackers to ${randomSeverity === "critical" ? "execute arbitrary code" : "access sensitive information"} on affected systems. The impact is considered ${randomRisk}.`,
    business_impact: `Organizations affected by this vulnerability may experience ${randomRisk === "critical" || randomRisk === "high" ? "significant" : "moderate"} business disruption, including potential data breaches, compliance violations, and reputational damage.`,
    updated_at: new Date().toISOString()
  };
}
