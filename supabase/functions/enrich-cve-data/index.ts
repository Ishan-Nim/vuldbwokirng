
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.21.0";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  const supabaseUrl = Deno.env.get('SUPABASE_URL') || '';
  const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') || '';
  
  const supabase = createClient(supabaseUrl, supabaseServiceKey);

  try {
    // Fetch unenriched vulnerabilities (those without technical_impact)
    const { data: unenrichedData, error: fetchError } = await supabase
      .from('vulnerabilities')
      .select('*')
      .is('technical_impact', null)
      .limit(10); // Process in batches
    
    if (fetchError) throw fetchError;
    
    if (!unenrichedData || unenrichedData.length === 0) {
      return new Response(
        JSON.stringify({ 
          success: true, 
          message: "処理が必要なエントリーはありません",
          count: 0,
          processed: []
        }),
        { 
          headers: { 
            ...corsHeaders, 
            "Content-Type": "application/json" 
          } 
        }
      );
    }
    
    console.log(`Found ${unenrichedData.length} unenriched vulnerability entries`);
    
    // Process each vulnerability
    const processResults = [];
    
    for (const vuln of unenrichedData) {
      try {
        // Generate enriched data with appropriate data
        const enrichedData = generateEnrichedData(vuln);
        
        // Update the vulnerability with enriched data (only fields that exist in the schema)
        const { error: updateError } = await supabase
          .from('vulnerabilities')
          .update({
            technical_impact: enrichedData.technical_impact,
            business_impact: enrichedData.business_impact,
            risk_rating: enrichedData.risk_rating,
            severity: enrichedData.severity,
            updated_at: new Date().toISOString()
          })
          .eq('id', vuln.id);
        
        if (updateError) throw updateError;
        
        processResults.push({
          id: vuln.id,
          title: vuln.title,
          cve_id: vuln.title.match(/CVE-\d{4}-\d+/) ? vuln.title.match(/CVE-\d{4}-\d+/)[0] : "Unknown",
          status: "success"
        });
        
        console.log(`Successfully enriched vulnerability: ${vuln.title}`);
      } catch (error) {
        console.error(`Error processing vulnerability ${vuln.id}:`, error);
        processResults.push({
          id: vuln.id,
          title: vuln.title,
          cve_id: vuln.title.match(/CVE-\d{4}-\d+/) ? vuln.title.match(/CVE-\d{4}-\d+/)[0] : "Unknown",
          status: "failed",
          error: error.message
        });
      }
    }
    
    return new Response(
      JSON.stringify({ 
        success: true, 
        message: `${processResults.length} 件の脆弱性エントリーが処理されました`,
        count: processResults.length,
        processed: processResults
      }),
      { 
        headers: { 
          ...corsHeaders, 
          "Content-Type": "application/json" 
        } 
      }
    );
    
  } catch (error) {
    console.error("Error enriching CVE data:", error);
    
    return new Response(
      JSON.stringify({ 
        success: false, 
        message: `CVE データの強化に失敗しました: ${error.message}` 
      }),
      { 
        status: 500,
        headers: { 
          ...corsHeaders, 
          "Content-Type": "application/json" 
        } 
      }
    );
  }
});

// Function to generate enrichment data, only returning fields that exist in the database schema
function generateEnrichedData(vulnerability) {
  // Determine CVE severity based on content
  const hasKeywords = (text, keywords) => {
    if (!text) return false;
    return keywords.some(keyword => text.toLowerCase().includes(keyword));
  };
  
  const criticalKeywords = [
    'critical', 'remote code execution', 'arbitrary code', 'unauthenticated', 
    'rce', 'command execution', 'authentication bypass', 'unauthorized access',
    'zero-day', 'privilege escalation', 'admin access'
  ];
  
  const highKeywords = [
    'high', 'sql injection', 'xss', 'cross-site', 'buffer overflow', 
    'memory corruption', 'directory traversal', 'path traversal',
    'authentication', 'authorization', 'information disclosure', 'sensitive data'
  ];
  
  const mediumKeywords = [
    'medium', 'information disclosure', 'denial of service', 'dos', 
    'cross-origin', 'csrf', 'clickjacking', 'open redirect'
  ];
  
  let severity = "low";
  
  if (hasKeywords(vulnerability.title + (vulnerability.description || ''), criticalKeywords)) {
    severity = "critical";
  } else if (hasKeywords(vulnerability.title + (vulnerability.description || ''), highKeywords)) {
    severity = "high";
  } else if (hasKeywords(vulnerability.title + (vulnerability.description || ''), mediumKeywords)) {
    severity = "medium";
  }
  
  // Risk ratings are critical, high, medium, low
  const riskRating = severity;
    
  // Generate technical impact
  const technicalImpactOptions = {
    critical: [
      "Remote code execution allows attackers to gain full control of affected systems.",
      "Complete system compromise possible through unauthenticated access.",
      "Arbitrary command execution with system privileges.",
      "Authentication bypass allowing unauthorized administrative access.",
      "Privilege escalation vulnerability allowing attackers to gain root/system privileges."
    ],
    high: [
      "Sensitive data exposure including potential access to authentication credentials.",
      "SQL injection allowing unauthorized database access and data manipulation.",
      "Memory corruption leading to application crash or potential code execution.",
      "Cross-site scripting allowing attackers to execute malicious scripts and steal session data.",
      "Path traversal vulnerability allowing access to restricted files on the server."
    ],
    medium: [
      "Cross-site scripting allowing session hijacking and user impersonation.",
      "Denial of service affecting application availability and system resources.",
      "Information disclosure revealing system configuration and technical details.",
      "Cross-site request forgery allowing attackers to perform actions as authenticated users.",
      "Open redirect vulnerability that could facilitate phishing attacks."
    ],
    low: [
      "Minor information disclosure not exposing sensitive data.",
      "Local-only exploit requiring physical access or existing compromise.",
      "Limited impact requiring extensive user interaction to exploit.",
      "Clickjacking vulnerability with minimal potential impact.",
      "Cache poisoning with limited exposure."
    ]
  };

  const randomImpact = options => options[Math.floor(Math.random() * options.length)];
  const technicalImpact = randomImpact(technicalImpactOptions[severity]);
  
  // Generate business impact
  const businessImpactOptions = {
    critical: [
      "Critical business disruption with potential for significant financial loss and reputational damage.",
      "Severe regulatory compliance violations resulting in potential fines and sanctions.",
      "Complete compromise of sensitive customer data requiring mandatory breach reporting.",
      "Significant service outage affecting core business operations and customer trust.",
      "Potential for material financial impact requiring disclosure to shareholders."
    ],
    high: [
      "Significant operational disruption affecting key business services and customer experience.",
      "Partial data breach with moderate financial and reputational impact requiring remediation.",
      "Compliance issues requiring immediate remediation and potential regulatory reporting.",
      "Loss of customer confidence resulting in potential revenue impact and increased churn.",
      "Temporary service degradation affecting business continuity and reliability metrics."
    ],
    medium: [
      "Moderate service disruption affecting non-critical systems with limited customer visibility.",
      "Limited unauthorized access with minimal sensitive data exposure requiring internal review.",
      "Minor compliance issues requiring documentation and process improvement.",
      "Potential for customer complaints or support escalations requiring additional resources.",
      "Internal workflow disruption affecting operational efficiency but not external services."
    ],
    low: [
      "Minimal business impact with no customer-facing service disruption.",
      "No sensitive data exposure or compliance implications requiring reporting.",
      "Negligible financial or reputational risk requiring standard remediation processes.",
      "Issue contained within pre-production or internal systems with no external impact.",
      "Self-contained vulnerability with established mitigation controls already in place."
    ]
  };

  const businessImpact = randomImpact(businessImpactOptions[severity]);

  // Analyze the vulnerability title to extract more specific information if possible
  let enhancedTechnicalImpact = technicalImpact;
  let enhancedBusinessImpact = businessImpact;
  
  if (vulnerability.title) {
    const title = vulnerability.title.toLowerCase();
    
    // Make the technical impact more specific if we can determine the vulnerability type
    if (title.includes('sql injection')) {
      enhancedTechnicalImpact = "SQL injection vulnerability allows attackers to execute arbitrary database queries, potentially accessing, modifying, or deleting sensitive data.";
    } else if (title.includes('xss') || title.includes('cross-site scripting')) {
      enhancedTechnicalImpact = "Cross-site scripting vulnerability allows attackers to inject malicious scripts that execute in users' browsers, potentially stealing session cookies and sensitive information.";
    } else if (title.includes('remote code') || title.includes('rce')) {
      enhancedTechnicalImpact = "Remote code execution vulnerability allows attackers to execute arbitrary code on the affected system with the privileges of the application.";
    }
    
    // Add specific product information to the business impact if available
    const productMatch = vulnerability.title.match(/(\w+(?:\s\w+){0,2}(?:CMS|Framework|System|Platform|Plugin|Extension|Module|Server|Client|Application))/);
    if (productMatch && productMatch[1]) {
      enhancedBusinessImpact = enhancedBusinessImpact.replace('business', `${productMatch[1]} business`);
      enhancedBusinessImpact = enhancedBusinessImpact.replace('service', `${productMatch[1]} service`);
    }
  }
  
  // Return only fields that exist in the database schema
  return {
    severity: severity,
    risk_rating: riskRating,
    technical_impact: enhancedTechnicalImpact || technicalImpact,
    business_impact: enhancedBusinessImpact || businessImpact,
    updated_at: new Date().toISOString()
  };
}
