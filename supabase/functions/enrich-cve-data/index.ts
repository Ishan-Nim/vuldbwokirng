
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.21.0";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  const supabaseUrl = Deno.env.get('SUPABASE_URL') || '';
  const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') || '';
  
  const supabase = createClient(supabaseUrl, supabaseServiceKey);

  try {
    // Fetch unenriched vulnerabilities (those without technical_impact)
    const { data: unenrichedData, error: fetchError } = await supabase
      .from('vulnerabilities')
      .select('*')
      .is('technical_impact', null)
      .limit(10); // Process in batches
    
    if (fetchError) throw fetchError;
    
    if (!unenrichedData || unenrichedData.length === 0) {
      return new Response(
        JSON.stringify({ 
          success: true, 
          message: "処理が必要なエントリーはありません",
          count: 0,
          processed: []
        }),
        { 
          headers: { 
            ...corsHeaders, 
            "Content-Type": "application/json" 
          } 
        }
      );
    }
    
    console.log(`Found ${unenrichedData.length} unenriched vulnerability entries`);
    
    // Process each vulnerability
    const processResults = [];
    
    for (const vuln of unenrichedData) {
      try {
        // Generate enriched data with appropriate data
        const enrichedData = generateEnrichedData(vuln);
        
        // Update the vulnerability with enriched data (only fields that exist in the schema)
        const { error: updateError } = await supabase
          .from('vulnerabilities')
          .update({
            technical_impact: enrichedData.technical_impact,
            business_impact: enrichedData.business_impact,
            risk_rating: enrichedData.risk_rating,
            severity: enrichedData.severity,
            updated_at: new Date().toISOString()
          })
          .eq('id', vuln.id);
        
        if (updateError) throw updateError;
        
        processResults.push({
          id: vuln.id,
          title: vuln.title,
          cve_id: vuln.title.match(/CVE-\d{4}-\d+/) ? vuln.title.match(/CVE-\d{4}-\d+/)[0] : "Unknown",
          status: "success"
        });
        
        console.log(`Successfully enriched vulnerability: ${vuln.title}`);
      } catch (error) {
        console.error(`Error processing vulnerability ${vuln.id}:`, error);
        processResults.push({
          id: vuln.id,
          title: vuln.title,
          cve_id: vuln.title.match(/CVE-\d{4}-\d+/) ? vuln.title.match(/CVE-\d{4}-\d+/)[0] : "Unknown",
          status: "failed",
          error: error.message
        });
      }
    }
    
    return new Response(
      JSON.stringify({ 
        success: true, 
        message: `${processResults.length} 件の脆弱性エントリーが処理されました`,
        count: processResults.length,
        processed: processResults
      }),
      { 
        headers: { 
          ...corsHeaders, 
          "Content-Type": "application/json" 
        } 
      }
    );
    
  } catch (error) {
    console.error("Error enriching CVE data:", error);
    
    return new Response(
      JSON.stringify({ 
        success: false, 
        message: `CVE データの強化に失敗しました: ${error.message}` 
      }),
      { 
        status: 500,
        headers: { 
          ...corsHeaders, 
          "Content-Type": "application/json" 
        } 
      }
    );
  }
});

// Function to generate enrichment data, only returning fields that exist in the database schema
function generateEnrichedData(vulnerability) {
  // Determine CVE severity based on content
  const hasKeywords = (text, keywords) => {
    if (!text) return false;
    return keywords.some(keyword => text.toLowerCase().includes(keyword));
  };
  
  const criticalKeywords = ['critical', 'remote code execution', 'arbitrary code', 'unauthenticated'];
  const highKeywords = ['high', 'sql injection', 'xss', 'cross-site', 'buffer overflow'];
  const mediumKeywords = ['medium', 'information disclosure', 'denial of service'];
  
  let severity = "low";
  
  if (hasKeywords(vulnerability.title + vulnerability.description, criticalKeywords)) {
    severity = "critical";
  } else if (hasKeywords(vulnerability.title + vulnerability.description, highKeywords)) {
    severity = "high";
  } else if (hasKeywords(vulnerability.title + vulnerability.description, mediumKeywords)) {
    severity = "medium";
  }
  
  // Risk ratings are critical, high, medium, low
  const riskRating = severity;
    
  // Generate technical impact
  const technicalImpactOptions = {
    critical: [
      "Remote code execution allows attackers to gain full control of affected systems.",
      "Complete system compromise possible through unauthenticated access.",
      "Arbitrary command execution with system privileges.",
    ],
    high: [
      "Sensitive data exposure including potential access to authentication credentials.",
      "SQL injection allowing unauthorized database access.",
      "Memory corruption leading to crash or potential code execution.",
    ],
    medium: [
      "Cross-site scripting allowing session hijacking.",
      "Denial of service affecting application availability.",
      "Information disclosure revealing system configuration details.",
    ],
    low: [
      "Minor information disclosure not exposing sensitive data.",
      "Local-only exploit requiring physical access.",
      "Limited impact requiring extensive user interaction.",
    ]
  };

  const randomImpact = options => options[Math.floor(Math.random() * options.length)];
  const technicalImpact = randomImpact(technicalImpactOptions[severity]);
  
  // Generate business impact
  const businessImpactOptions = {
    critical: [
      "Critical business disruption with potential for significant financial loss and reputational damage.",
      "Severe regulatory compliance violations resulting in potential fines and sanctions.",
      "Complete compromise of sensitive customer data requiring mandatory breach reporting.",
    ],
    high: [
      "Significant operational disruption affecting key business services.",
      "Partial data breach with moderate financial and reputational impact.",
      "Compliance issues requiring remediation and potential reporting.",
    ],
    medium: [
      "Moderate service disruption affecting non-critical systems.",
      "Limited unauthorized access with minimal sensitive data exposure.",
      "Minor compliance issues requiring internal documentation.",
    ],
    low: [
      "Minimal business impact with no service disruption.",
      "No sensitive data exposure or compliance implications.",
      "Negligible financial or reputational risk.",
    ]
  };

  const businessImpact = randomImpact(businessImpactOptions[severity]);

  // Return only fields that exist in the database schema
  return {
    severity: severity,
    risk_rating: riskRating,
    technical_impact: technicalImpact,
    business_impact: businessImpact,
    updated_at: new Date().toISOString()
  };
}
