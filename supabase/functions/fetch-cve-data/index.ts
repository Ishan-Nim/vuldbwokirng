
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { DOMParser } from "https://deno.land/x/deno_dom@v0.1.43/deno-dom-wasm.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.21.0";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  const supabaseUrl = Deno.env.get('SUPABASE_URL') || '';
  const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') || '';
  
  const supabase = createClient(supabaseUrl, supabaseServiceKey);

  try {
    // Fetch the RSS feed
    const response = await fetch("https://cvefeed.io/rssfeed/latest.xml");
    
    if (!response.ok) {
      throw new Error(`Failed to fetch RSS feed: ${response.status} ${response.statusText}`);
    }
    
    const xml = await response.text();
    const parser = new DOMParser();
    const doc = parser.parseFromString(xml, "text/xml");
    
    if (!doc) {
      throw new Error("Failed to parse XML");
    }
    
    const items = doc.querySelectorAll("item");
    const cveEntries = [];
    
    for (const item of items) {
      const title = item.querySelector("title")?.textContent || "";
      const link = item.querySelector("link")?.textContent || "";
      const description = item.querySelector("description")?.textContent || "";
      const pubDate = item.querySelector("pubDate")?.textContent || "";
      
      // Extract CVE ID from title or description
      const cveIdMatch = title.match(/CVE-\d{4}-\d+/) || 
                        description.match(/CVE-\d{4}-\d+/);
      const cveId = cveIdMatch ? cveIdMatch[0] : null;
      
      // Create vulnerability object
      const vulnerability = {
        title: title,
        description: description,
        severity: null, // To be filled by AI enrichment
        risk_rating: null, // To be filled by AI enrichment
        technical_impact: null, // To be filled by AI enrichment
        business_impact: null, // To be filled by AI enrichment
        is_vulnerable: true,
        created_at: new Date(pubDate).toISOString(),
        updated_at: new Date().toISOString()
      };
      
      cveEntries.push(vulnerability);
    }
    
    // Insert the entries into the vulnerabilities table
    if (cveEntries.length > 0) {
      const { data, error } = await supabase
        .from('vulnerabilities')
        .insert(cveEntries);
      
      if (error) throw error;
    }
    
    return new Response(
      JSON.stringify({ 
        success: true, 
        message: `Successfully fetched ${cveEntries.length} CVE entries`,
        count: cveEntries.length
      }),
      { 
        headers: { 
          ...corsHeaders, 
          "Content-Type": "application/json" 
        } 
      }
    );
    
  } catch (error) {
    console.error("Error fetching CVE data:", error);
    
    return new Response(
      JSON.stringify({ 
        success: false, 
        message: error.message 
      }),
      { 
        status: 500,
        headers: { 
          ...corsHeaders, 
          "Content-Type": "application/json" 
        } 
      }
    );
  }
});
