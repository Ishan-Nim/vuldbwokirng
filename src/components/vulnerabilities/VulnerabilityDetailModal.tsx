
import React from 'react';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter
} from '@/components/ui/dialog';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Separator } from '@/components/ui/separator';
import { AlertCircle, CheckCircle, Link, Server } from 'lucide-react';
import { cn } from '@/lib/utils';

interface VulnerabilityDetailModalProps {
  isOpen: boolean;
  onClose: () => void;
  vulnerability: {
    cveId: string;
    title: string;
    description: string;
    severity: 'critical' | 'high' | 'medium' | 'low';
    cvssScore: number;
    publishedDate: string;
    technicalAnalysis: string;
    businessImpact: string;
    knownExploits: string;
    mitigationStrategies: string;
    affectedProducts: string[];
    relatedCVEs?: string[];
  };
}

export const VulnerabilityDetailModal: React.FC<VulnerabilityDetailModalProps> = ({
  isOpen,
  onClose,
  vulnerability
}) => {
  const {
    cveId,
    title,
    description,
    severity,
    cvssScore,
    publishedDate,
    technicalAnalysis,
    businessImpact,
    knownExploits,
    mitigationStrategies,
    affectedProducts,
    relatedCVEs
  } = vulnerability;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-3xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <div className="flex items-center justify-between">
            <div>
              <span className={cn("severity-tag", `severity-${severity}`)}>{severity.toUpperCase()}</span>
              <span className="ml-2 text-sm font-mono">CVSS {cvssScore}</span>
            </div>
            <span className="text-sm text-muted-foreground">{publishedDate}</span>
          </div>
          <DialogTitle className="mt-2 font-mono text-sm text-muted-foreground">
            {cveId}
          </DialogTitle>
          <DialogDescription className="text-lg font-semibold text-foreground mt-1">
            {title}
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-4">
          <div>
            <h3 className="font-medium mb-2">Description</h3>
            <p className="text-sm">{description}</p>
          </div>

          <Separator />

          <div>
            <h3 className="font-medium mb-2">Technical Analysis</h3>
            <p className="text-sm">{technicalAnalysis}</p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="bg-muted/50 rounded-lg p-4">
              <h3 className="font-medium mb-2 flex items-center">
                <AlertCircle className="h-4 w-4 mr-2 text-severity-critical" />
                Business Impact
              </h3>
              <p className="text-sm">{businessImpact}</p>
            </div>

            <div className="bg-muted/50 rounded-lg p-4">
              <h3 className="font-medium mb-2 flex items-center">
                <CheckCircle className="h-4 w-4 mr-2 text-severity-low" />
                Mitigation Strategies
              </h3>
              <p className="text-sm">{mitigationStrategies}</p>
            </div>
          </div>

          <div>
            <h3 className="font-medium mb-2">Known Exploits</h3>
            <p className="text-sm">{knownExploits}</p>
          </div>

          <Separator />
          
          <div>
            <h3 className="font-medium mb-2">Affected Products</h3>
            <div className="flex flex-wrap gap-2">
              {affectedProducts.map((product, idx) => (
                <Badge key={idx} variant="outline" className="flex items-center gap-1">
                  <Server className="h-3 w-3" />
                  {product}
                </Badge>
              ))}
            </div>
          </div>

          {relatedCVEs && relatedCVEs.length > 0 && (
            <div>
              <h3 className="font-medium mb-2">Related CVEs</h3>
              <div className="flex flex-wrap gap-2">
                {relatedCVEs.map((cve, idx) => (
                  <Badge key={idx} variant="outline" className="flex items-center gap-1">
                    <Link className="h-3 w-3" />
                    {cve}
                  </Badge>
                ))}
              </div>
            </div>
          )}
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={onClose}>Close</Button>
          <Button variant="default">View Original Source</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};
