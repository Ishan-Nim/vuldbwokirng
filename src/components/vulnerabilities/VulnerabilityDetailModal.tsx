
import React from 'react';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter
} from '@/components/ui/dialog';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Separator } from '@/components/ui/separator';
import { 
  AlertCircle, 
  CheckCircle, 
  Link, 
  Server, 
  Shield, 
  AlertTriangle, 
  ExternalLink,
  Calendar,
  Clock,
  Target,
  Code,
  Database,
  FileWarning
} from 'lucide-react';
import { cn } from '@/lib/utils';

interface VulnerabilityDetailModalProps {
  isOpen: boolean;
  onClose: () => void;
  vulnerability: {
    id: string;
    cveId: string;
    title: string;
    description: string;
    severity: 'critical' | 'high' | 'medium' | 'low';
    cvssScore: number;
    publishedDate: string;
    technicalAnalysis: string;
    businessImpact: string;
    knownExploits: string;
    mitigationStrategies: string;
    affectedProducts: string[];
    exploitStatus?: string;
    relatedCVEs?: string[];
    riskRating?: string;
  };
}

export const VulnerabilityDetailModal: React.FC<VulnerabilityDetailModalProps> = ({
  isOpen,
  onClose,
  vulnerability
}) => {
  const {
    cveId,
    title,
    description,
    severity,
    cvssScore,
    publishedDate,
    technicalAnalysis,
    businessImpact,
    knownExploits,
    mitigationStrategies,
    affectedProducts,
    exploitStatus,
    relatedCVEs,
    riskRating
  } = vulnerability;

  const getSeverityColor = (sev: string) => {
    switch (sev.toLowerCase()) {
      case 'critical':
        return 'bg-red-600 text-white';
      case 'high':
        return 'bg-orange-500 text-white';
      case 'medium':
        return 'bg-yellow-500 text-white';
      case 'low':
        return 'bg-green-600 text-white';
      default:
        return 'bg-blue-500 text-white';
    }
  };

  const getExploitStatusIcon = () => {
    if (knownExploits.toLowerCase().includes('actively') || exploitStatus?.toLowerCase().includes('active')) {
      return <AlertTriangle className="h-4 w-4 text-red-500 mr-2" />;
    } else if (knownExploits.toLowerCase().includes('available') || exploitStatus?.toLowerCase().includes('available')) {
      return <AlertCircle className="h-4 w-4 text-orange-500 mr-2" />;
    } else {
      return <Shield className="h-4 w-4 text-green-500 mr-2" />;
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader className="space-y-2">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <span className={cn("px-2 py-1 rounded-md text-xs font-bold", getSeverityColor(severity))}>
                {severity.toUpperCase()}
              </span>
              <span className="text-sm font-mono">CVSS {cvssScore}</span>
              {riskRating && (
                <Badge variant="outline" className="ml-2 capitalize">
                  {riskRating} Risk
                </Badge>
              )}
            </div>
            <div className="flex items-center gap-2">
              <Calendar className="h-4 w-4 text-muted-foreground" />
              <span className="text-sm text-muted-foreground">{publishedDate}</span>
            </div>
          </div>
          
          <DialogTitle className="font-mono text-sm text-muted-foreground">
            {cveId}
          </DialogTitle>
          
          <DialogDescription className="text-xl font-semibold text-foreground">
            {title}
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-6 mt-2">
          <section>
            <h3 className="font-medium text-lg mb-2 flex items-center">
              <FileWarning className="h-5 w-5 mr-2 text-muted-foreground" />
              Description
            </h3>
            <p className="text-sm">{description || "No detailed description available for this vulnerability."}</p>
          </section>

          <Separator />

          <section>
            <h3 className="font-medium text-lg mb-2 flex items-center">
              <Code className="h-5 w-5 mr-2 text-muted-foreground" />
              Technical Analysis
            </h3>
            <div className="bg-muted/30 p-4 rounded-lg border">
              <p className="text-sm">{technicalAnalysis}</p>
            </div>
          </section>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <section className="bg-muted/20 rounded-lg p-4 border">
              <h3 className="font-medium text-lg mb-3 flex items-center">
                <AlertCircle className="h-5 w-5 mr-2 text-red-500" />
                Business Impact
              </h3>
              <p className="text-sm">{businessImpact}</p>
            </section>

            <section className="bg-muted/20 rounded-lg p-4 border">
              <h3 className="font-medium text-lg mb-3 flex items-center">
                <CheckCircle className="h-5 w-5 mr-2 text-green-500" />
                Mitigation Strategies
              </h3>
              <p className="text-sm">{mitigationStrategies}</p>
            </section>
          </div>

          <section>
            <h3 className="font-medium text-lg mb-2 flex items-center">
              {getExploitStatusIcon()}
              Known Exploits
            </h3>
            <div className="bg-muted/30 p-4 rounded-lg border">
              <div className="flex items-center mb-2">
                <Badge className={
                  knownExploits.toLowerCase().includes('active') || exploitStatus?.toLowerCase().includes('active')
                    ? 'bg-red-100 text-red-800 border-red-300'
                    : knownExploits.toLowerCase().includes('available') || exploitStatus?.toLowerCase().includes('available')
                      ? 'bg-orange-100 text-orange-800 border-orange-300'
                      : 'bg-green-100 text-green-800 border-green-300'
                }>
                  {exploitStatus || knownExploits}
                </Badge>
              </div>
              <p className="text-sm">
                {knownExploits.toLowerCase().includes('active') || exploitStatus?.toLowerCase().includes('active')
                  ? "Active exploitation has been detected in the wild. Immediate action is recommended."
                  : knownExploits.toLowerCase().includes('available') || exploitStatus?.toLowerCase().includes('available')
                    ? "Proof of concept exploits are available but widespread exploitation has not been detected yet."
                    : "No known exploits have been reported at this time."
                }
              </p>
            </div>
          </section>

          <Separator />
          
          <section>
            <h3 className="font-medium text-lg mb-2 flex items-center">
              <Database className="h-5 w-5 mr-2 text-muted-foreground" />
              Affected Products
            </h3>
            <div className="bg-muted/20 p-4 rounded-lg border">
              <div className="flex flex-wrap gap-2">
                {affectedProducts && affectedProducts.length > 0 ? (
                  affectedProducts.map((product, idx) => (
                    <Badge key={idx} variant="outline" className="flex items-center gap-1 px-2 py-1">
                      <Server className="h-3 w-3" />
                      {product}
                    </Badge>
                  ))
                ) : (
                  <p className="text-sm text-muted-foreground">No specific affected products listed.</p>
                )}
              </div>
            </div>
          </section>

          {relatedCVEs && relatedCVEs.length > 0 && (
            <section>
              <h3 className="font-medium text-lg mb-2 flex items-center">
                <Link className="h-5 w-5 mr-2 text-muted-foreground" />
                Related CVEs
              </h3>
              <div className="bg-muted/20 p-4 rounded-lg border">
                <div className="flex flex-wrap gap-2">
                  {relatedCVEs.map((cve, idx) => (
                    <Badge key={idx} variant="outline" className="flex items-center gap-1 px-2 py-1">
                      <ExternalLink className="h-3 w-3" />
                      {cve}
                    </Badge>
                  ))}
                </div>
              </div>
            </section>
          )}

          <section className="bg-muted/10 p-4 rounded-lg border">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <Target className="h-5 w-5 text-muted-foreground" />
                <span className="font-medium">Detection Methods</span>
              </div>
              <Badge variant="outline">Advanced</Badge>
            </div>
            <p className="text-sm mt-2">
              This vulnerability can be detected using vulnerability scanners that check for outdated versions
              and specific configuration weaknesses in the affected systems.
            </p>
          </section>

          <section className="bg-muted/10 p-4 rounded-lg border">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <Clock className="h-5 w-5 text-muted-foreground" />
                <span className="font-medium">Timeline</span>
              </div>
            </div>
            <div className="mt-2 space-y-2">
              <div className="flex justify-between text-sm">
                <span className="text-muted-foreground">Discovered:</span>
                <span>{publishedDate}</span>
              </div>
              <div className="flex justify-between text-sm">
                <span className="text-muted-foreground">Published:</span>
                <span>{publishedDate}</span>
              </div>
              <div className="flex justify-between text-sm">
                <span className="text-muted-foreground">Last Updated:</span>
                <span>{new Date().toLocaleDateString()}</span>
              </div>
            </div>
          </section>
        </div>

        <DialogFooter className="flex flex-col sm:flex-row gap-2 mt-6">
          <Button variant="outline" onClick={onClose}>Close</Button>
          <Button variant="default" className="flex items-center gap-1">
            View Original Source
            <ExternalLink className="h-4 w-4" />
          </Button>
          <Button variant="secondary" className="flex items-center gap-1">
            Export Report
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};
