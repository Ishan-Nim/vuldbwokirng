
import React from 'react';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent, CardFooter, CardHeader } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { ArrowRightIcon, Server, Shield, AlertTriangle, AlertCircle } from 'lucide-react';
import { cn } from '@/lib/utils';

interface VulnerabilityCardProps {
  cveId: string;
  title: string;
  description: string;
  severity: 'critical' | 'high' | 'medium' | 'low';
  cvssScore: number;
  publishedDate: string;
  affectedProducts: string[];
  exploitStatus?: string;
  onClick?: () => void;
}

const VulnerabilityCard: React.FC<VulnerabilityCardProps> = ({
  cveId,
  title,
  description,
  severity,
  cvssScore,
  publishedDate,
  affectedProducts,
  exploitStatus,
  onClick
}) => {
  
  const getSeverityColor = (sev: string) => {
    switch (sev.toLowerCase()) {
      case 'critical':
        return 'bg-red-600 text-white';
      case 'high':
        return 'bg-orange-500 text-white';
      case 'medium':
        return 'bg-yellow-500 text-white';
      case 'low':
        return 'bg-green-600 text-white';
      default:
        return 'bg-blue-500 text-white';
    }
  };

  const getExploitStatusIcon = () => {
    if (!exploitStatus) return null;
    
    if (exploitStatus.toLowerCase().includes('active')) {
      return <AlertTriangle className="h-4 w-4 text-red-500 mr-1" />;
    } else if (exploitStatus.toLowerCase().includes('available')) {
      return <AlertCircle className="h-4 w-4 text-orange-500 mr-1" />;
    } else {
      return <Shield className="h-4 w-4 text-green-500 mr-1" />;
    }
  };

  // Increase description length to show even more content (1000 characters)
  const truncatedDescription = description.length > 1000 
    ? description.substring(0, 1000) + '...' 
    : description;

  // Function to format the date nicely
  const formatDate = (dateString: string) => {
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString();
    } catch (error) {
      return dateString;
    }
  };

  return (
    <Card className="h-full flex flex-col hover:shadow-md transition-shadow border-l-4" 
      style={{ borderLeftColor: severity === 'critical' ? '#e53e3e' : 
                              severity === 'high' ? '#dd6b20' : 
                              severity === 'medium' ? '#d69e2e' : '#38a169' }}>
      <CardHeader className="pb-2">
        <div className="flex justify-between items-start">
          <h3 className="font-mono text-sm text-muted-foreground">{cveId}</h3>
          <span className={cn("px-2 py-0.5 rounded-md text-xs font-bold", getSeverityColor(severity))}>
            {severity.toUpperCase()} {cvssScore > 0 ? cvssScore : ''}
          </span>
        </div>
        <h2 className="text-lg font-semibold mt-1 line-clamp-2">{title}</h2>
      </CardHeader>
      <CardContent className="flex-1">
        <p className="text-sm text-muted-foreground line-clamp-8">{truncatedDescription}</p>
        
        <div className="mt-4 space-y-3">
          {exploitStatus && (
            <div className="flex items-center">
              {getExploitStatusIcon()}
              <span className="text-xs font-medium">{exploitStatus}</span>
            </div>
          )}
          
          <div className="flex flex-wrap gap-1">
            {affectedProducts && affectedProducts.length > 0 && affectedProducts.slice(0, 5).map((product, idx) => (
              <Badge key={idx} variant="outline" className="flex items-center gap-1">
                <Server className="h-3 w-3" />
                <span className="truncate max-w-[150px]">{product}</span>
              </Badge>
            ))}
            {affectedProducts && affectedProducts.length > 5 && (
              <Badge variant="outline">+{affectedProducts.length - 5} more</Badge>
            )}
          </div>
        </div>
      </CardContent>
      <CardFooter className="pt-2 flex justify-between items-center border-t">
        <span className="text-xs text-muted-foreground">{formatDate(publishedDate)}</span>
        <Button variant="ghost" size="sm" onClick={onClick} className="text-xs">
          詳細を見る <ArrowRightIcon className="ml-1 h-3 w-3" />
        </Button>
      </CardFooter>
    </Card>
  );
};

export default VulnerabilityCard;
